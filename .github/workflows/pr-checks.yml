name: Pull Request Checks

on:
  pull_request:
    branches: [ main ]

jobs:
  lint:
    name: Lint and Code Quality
    runs-on: ubuntu-latest
    env:
      NO_ENV_FILE: 'true'
      DEV_DOCKER_WORKFLOW: 'none'
      NO_DOCKER: 'true'
      PYTHONPATH: ${{ github.workspace }}
      CHECK_ONLY: 'true'  # Ensures the script runs in check mode without modifying files
    
    steps:
    - name: Check out repository code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
        # Install compatible version of pylint-django since 3.0.0 is not available
        pip install pylint-django==2.6.1 --force-reinstall
        
    - name: Run code quality checks
      run: |
        ./scripts/check

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    env:
      NO_ENV_FILE: 'true'
      DEV_DOCKER_WORKFLOW: 'none'
      TEST_DB_ENGINE: 'django.db.backends.sqlite3'
      TEST_DB_NAME: ':memory:'
      TEST_DB_USER: ''
      TEST_DB_PASSWORD: ''
      TEST_DB_HOST: ''
      TEST_DB_PORT: ''
      NO_DOCKER: 'true'
      PYTHONPATH: ${{ github.workspace }}
      DJANGO_SETTINGS_MODULE: bracket_iq.settings.test
    
    steps:
    - name: Check out repository code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
        # Install compatible version of pylint-django since 3.0.0 is not available
        pip install pylint-django==2.6.1 --force-reinstall
        
    - name: Run tests with coverage
      run: |
        ./scripts/test --coverage --xml-report
        
    - name: Upload coverage report
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  build-check:
    name: Check Build
    runs-on: ubuntu-latest
    env:
      NO_ENV_FILE: 'true'
    
    steps:
    - name: Check out repository code
      uses: actions/checkout@v4
      
    - name: Build Docker image
      run: |
        docker build -t bracket-iq:test .
        
  status:
    name: PR Status Check
    runs-on: ubuntu-latest
    needs: [lint, test, build-check]
    if: always()
    steps:
      - name: Check if all jobs succeeded
        run: |
          if [ "${{ contains(needs.*.result, 'failure') }}" = "true" ]; then
            echo "One or more checks failed!"
            exit 1
          else
            echo "All checks passed successfully!"
          fi 