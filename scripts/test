#!/bin/bash
set -e
script_base=$(dirname "$0")
source $script_base/tools
cd $script_base/..

# Default test options
PYTEST_ARGS=""

function show_help {
    echo "Run unit tests with pytest (in Docker if available)."
    echo
    echo "Usage: $(basename $0) <options> [<TEST_PATH>]"
    echo
    echo "Options:"
    echo "  -v  --verbose       Run tests with more verbose output"
    echo "  -k  --keep-db       Keep the test database between runs (--reuse-db)"
    echo "  -f  --failfast      Stop tests after the first failure (--exitfirst)"
    echo "  -p  --parallel      Run tests in parallel"
    echo "  -c  --coverage      Run tests with coverage analysis"
    echo "  -r  --report        Generate coverage report"
    echo "  -h  --help          This help message"
    echo
    echo "Note: any additional arguments will be passed to pytest."
    exit 0
}

# Test arguments to collect
POSITIONAL=()

# Process command line arguments
while [[ $# -gt 0 ]]; do
    key="$1"
    case $key in
        -v|--verbose)
            PYTEST_ARGS+=" -v"
            shift
            ;;
        -k|--keep-db)
            PYTEST_ARGS+=" --reuse-db"
            shift
            ;;
        -f|--failfast)
            PYTEST_ARGS+=" --exitfirst"
            shift
            ;;
        -p|--parallel)
            PYTEST_ARGS+=" -xvs"
            shift
            ;;
        -c|--coverage)
            PYTEST_ARGS+=" --cov=bracket_iq"
            shift
            ;;
        -r|--report)
            PYTEST_ARGS+=" --cov=bracket_iq --cov-report=html"
            echo "Coverage report will be generated in htmlcov/"
            shift
            ;;
        -h|--help)
            show_help
            shift
            ;;
        *)
            # Collect all other arguments to pass directly to pytest
            POSITIONAL+=("$1")
            shift
            ;;
    esac
done

# Load environment variables
if [ -f .env ]; then
    set -a
    source .env
    set +a
fi

# Function to check if Docker is available
can_run_docker() {
    if command -v docker >/dev/null 2>&1 && docker info >/dev/null 2>&1; then
        return 0  # Docker is available
    fi
    return 1  # Docker is not available
}

# Function to check if Docker Compose is available (either format)
can_run_docker_compose() {
    if command -v docker-compose >/dev/null 2>&1; then
        DOCKER_COMPOSE="docker-compose"
        return 0
    elif command -v docker >/dev/null 2>&1 && docker compose version >/dev/null 2>&1; then
        DOCKER_COMPOSE="docker compose"
        return 0
    fi
    return 1
}

# Set up testing environment
if [ "${NO_DOCKER}" != "true" ] && can_run_docker && can_run_docker_compose; then
    echo "Running tests in Docker container..."
    
    # Ensure pytest and related packages are installed in the container
    $DOCKER_COMPOSE run --rm web pip install -q pytest pytest-django pytest-cov pytest-xdist
    
    # Set up runner for Docker
    runner="$DOCKER_COMPOSE run --rm -e DJANGO_SETTINGS_MODULE=bracket_iq.settings.test -e PYTHONPATH=/app web"
else
    if [ "${NO_DOCKER}" == "true" ]; then
        echo "Docker disabled by NO_DOCKER environment variable. Running tests locally..."
    elif can_run_docker; then
        echo "Docker available but Docker Compose not found. Running tests locally..."
    else
        echo "Docker not available. Running tests locally..."
    fi
    # Check if we're in a virtual environment, activate if not
    if [[ -z "${VIRTUAL_ENV}" ]]; then
        if [ -d "venv" ]; then
            source venv/bin/activate
        elif [ -d "venv_py3.13" ]; then
            source venv_py3.13/bin/activate
        fi
    fi
    
    # Install required packages locally if needed
    pip install -q pytest pytest-django pytest-cov pytest-xdist --no-warn-script-location
    
    # Set environment for local execution
    export DJANGO_SETTINGS_MODULE=bracket_iq.settings.test
    export PYTHONPATH=$(pwd)
    runner=""
fi

# Run the tests using pytest with any additional arguments
if [ ${#POSITIONAL[@]} -eq 0 ]; then
    $runner pytest $PYTEST_ARGS bracket_iq/
else
    $runner pytest $PYTEST_ARGS "${POSITIONAL[@]}" 
fi 