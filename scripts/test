#!/bin/bash
set -e
script_base=$(dirname "$0")
source $script_base/tools
cd $script_base/..

# Default test options
test_cmd="python -m pytest"
flags="--ds=bracket_iq.settings.test"  # Django settings module for pytest-django
test_args=""

POSITIONAL=()
while [[ $# -gt 0 ]]; do
    key="$1"
    case $key in
        -v|--verbose)
            flags+=" -v"
            ;;
        -k|--keep-db)
            flags+=" --reuse-db"
            ;;
        -f|--failfast)
            flags+=" --exitfirst"
            ;;
        -p|--parallel)
            flags+=" -xvs"  # Run tests in parallel with pytest-xdist
            ;;
        -c|--coverage)
            flags+=" --cov=bracket_iq"
            ;;
        -r|--report)
            flags+=" --cov=bracket_iq --cov-report=html"
            echo "Coverage report will be generated in htmlcov/"
            ;;
        -h|--help)
            echo "Run unit tests with pytest."
            echo
            echo "Usage: $(basename $0) <options> [<TEST_PATH>]"
            echo
            echo "Options:"
            echo "  -v  --verbose       Run tests with more verbose output"
            echo "  -k  --keep-db       Keep the test database between runs (--reuse-db)"
            echo "  -f  --failfast      Stop tests after the first failure (--exitfirst)"
            echo "  -p  --parallel      Run tests in parallel"
            echo "  -c  --coverage      Run tests with coverage analysis"
            echo "  -r  --report        Generate coverage report"
            echo "  -h  --help          This help message"
            echo
            echo "Note: any additional arguments will be passed to pytest."
            exit 0
            ;;
        *)
            POSITIONAL+=("$key")
            ;;
    esac
    shift
done
set -- "${POSITIONAL[@]}"

# Load environment
if [ -f .env ]; then
    set -a
    source .env
    set +a
fi

# Set test database to SQLite for simplified testing
export TEST_DB_ENGINE="sqlite3"

# Check if we're in a virtual environment, activate if not
if [[ -z "${VIRTUAL_ENV}" ]]; then
    if [ -d "venv" ]; then
        source venv/bin/activate
    elif [ -d "venv_py3.13" ]; then
        source venv_py3.13/bin/activate
    fi
fi

# Ensure required packages are installed
echo "Checking requirements for pytest testing..."
pip install -q pytest pytest-django pytest-cov pytest-xdist

# Create pytest.ini if it doesn't exist
if [ ! -f pytest.ini ]; then
    echo "Creating pytest.ini configuration file..."
    cat > pytest.ini << EOF
[pytest]
DJANGO_SETTINGS_MODULE = bracket_iq.settings.test
python_files = test_*.py
testpaths = bracket_iq
python_classes = *Tests
filterwarnings =
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
EOF
fi

# Run tests
if [[ -n "$*" ]]; then
    $test_cmd $flags "$@"
else
    $test_cmd $flags bracket_iq/
fi 