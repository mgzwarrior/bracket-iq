#!/bin/bash
set -e
script_base=$(dirname "$0")
source $script_base/tools
cd $script_base/..

POSITIONAL=()
while [[ $# -gt 0 ]]; do
    key="$1"
    case $key in
        -h|--help|?)
            echo "Set up the Docker development environment."
            echo
            cecho "Usage: $(basename $0) <options>" default bold
            echo
            echo "Options:"
            echo "  -h  --help          This help message"
            exit 0
            ;;
        *)
            POSITIONAL+=("$key")
            ;;
    esac
    shift
done
set -- "${POSITIONAL[@]}"

# Create required directories
cecho "Creating required directories..." green
mkdir -p static media

# Ensure environment file exists
if [ ! -f ".env" ]; then
    cecho "Creating environment file..." green
    cp .env-dist .env
fi

# Load environment variables
load_env

# Docker development setup
cecho "Setting up Docker development environment..." green

# Check if Docker is installed
if ! command -v docker &> /dev/null; then
    cecho "Error: Docker is not installed" red bold
    echo "Please install Docker Desktop from https://www.docker.com/products/docker-desktop"
    exit 1
fi

# Check if Docker is running
if ! docker info &> /dev/null; then
    cecho "Error: Docker is not running" red bold
    echo "Please start Docker Desktop and try again"
    exit 1
fi

# Create Docker network if it doesn't exist
if ! docker network ls | grep -q bracket_iq_network; then
    cecho "Creating Docker network..." green
    docker network create bracket_iq_network
fi

# Stop any running containers and remove them
cecho "Stopping any running containers..." green
docker compose down

# Build and start services
cecho "Building and starting services..." green
docker compose build
docker compose up -d db

# Wait for database to be ready
cecho "Waiting for database to be ready..." green
sleep 5

# Run migrations and collect static files
cecho "Setting up application..." green
docker compose run --rm web python manage.py migrate
docker compose run --rm web python manage.py collectstatic --noinput

# Create superuser if it doesn't exist
if [ "$(docker compose run --rm web python manage.py shell -c 'from django.contrib.auth import get_user_model; print(get_user_model().objects.filter(is_superuser=True).exists())')" = "False" ]; then
    cecho "Creating superuser..." green
    docker compose run --rm web python manage.py shell -c "from django.contrib.auth import get_user_model; User = get_user_model(); User.objects.create_superuser('appuser', 'appuser@example.com', 'testpass123') if not User.objects.filter(username='appuser').exists() else None"
    cecho "Superuser created with the following credentials:" blue
    cecho "Username: appuser" blue
    cecho "Password: testpass123" blue
else
    cecho "Superuser already exists with the following credentials:" blue
    cecho "Username: appuser" blue
    cecho "Password: testpass123" blue
fi

# Start all services
cecho "Starting all services..." green
docker compose up -d

cecho "Setup complete! ðŸŽ‰" green bold
echo
cecho "Your development environment is ready:" blue
echo "1. Services are running at http://localhost:8000"
echo "2. Use './scripts/manage <command>' to run Django commands"
echo "3. Use './scripts/stop' to stop services" 