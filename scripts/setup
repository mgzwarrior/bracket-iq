#!/bin/bash
set -e
script_base=$(dirname "$0")
source $script_base/tools
cd $script_base/..

POSITIONAL=()
while [[ $# -gt 0 ]]; do
    key="$1"
    case $key in
        -h|--help|?)
            echo "Set up the development environment."
            echo
            cecho "Usage: $(basename $0) <options>" default bold
            echo
            echo "Options:"
            echo "  -h  --help          This help message"
            echo "  -l  --local         Set up for local development (without Docker)"
            exit 0
            ;;
        -l|--local)
            local=1
            shift
            ;;
        *)
            POSITIONAL+=("$key")
            ;;
    esac
    shift
done
set -- "${POSITIONAL[@]}"

# Create required directories
cecho "Creating required directories..." green
mkdir -p static media

# Check if PostgreSQL is installed for local development
if [ "$local" ]; then
    if ! command -v psql &> /dev/null; then
        cecho "Error: PostgreSQL is not installed" red bold
        echo "Please install PostgreSQL first:"
        echo "  macOS: brew install postgresql@15"
        echo "  Linux: sudo apt-get install postgresql"
        exit 1
    fi

    # Check if PostgreSQL service is running
    if ! pg_isready &> /dev/null; then
        cecho "Error: PostgreSQL service is not running" red bold
        echo "Please start PostgreSQL service:"
        echo "  macOS: brew services start postgresql@15"
        echo "  Linux: sudo service postgresql start"
        exit 1
    fi
fi

# Ensure environment file exists
if [ ! -f ".env" ]; then
    cecho "Creating environment file..." green
    cp .env-dist .env
    
    if [ "$local" ]; then
        cecho "Configuring for local development..." green
        sed -i '' 's/DB_HOST=db/DB_HOST=localhost/' .env
        sed -i '' 's/DEV_DOCKER_WORKFLOW=full/DEV_DOCKER_WORKFLOW=none/' .env
    fi
fi

# Load environment variables
load_env

if [ "$local" ]; then
    # Local development setup
    cecho "Setting up local development environment..." green
    
    # Create virtual environment if it doesn't exist
    if [ ! -d "venv" ]; then
        cecho "Creating virtual environment..." green
        python3 -m venv venv
    fi

    # Activate virtual environment
    source venv/bin/activate

    # Install dependencies
    cecho "Installing dependencies..." green
    pip install --upgrade pip
    pip install -r requirements.txt

    # Set up pre-commit hooks if .pre-commit-config.yaml exists
    if [ -f ".pre-commit-config.yaml" ]; then
        cecho "Setting up pre-commit hooks..." green
        pre-commit install
    fi

    # Create PostgreSQL database if it doesn't exist
    if ! psql -lqt | cut -d \| -f 1 | grep -qw "${DB_NAME}"; then
        cecho "Creating PostgreSQL database..." green
        createdb "${DB_NAME}"
    fi

    # Run migrations
    cecho "Running migrations..." green
    python manage.py migrate

    # Collect static files
    cecho "Collecting static files..." green
    python manage.py collectstatic --noinput

    # Create superuser if it doesn't exist
    if [ -z "$(python manage.py shell -c 'from django.contrib.auth import get_user_model; print(get_user_model().objects.filter(is_superuser=True).exists())')" ]; then
        cecho "Creating superuser..." green
        python manage.py createsuperuser
    fi

    cecho "Local setup complete! ðŸŽ‰" green bold
    echo
    cecho "To start the development server:" blue
    echo "Run: ./scripts/manage runserver"
else
    # Docker development setup
    cecho "Setting up Docker development environment..." green

    # Check if Docker is installed
    if ! command -v docker &> /dev/null; then
        cecho "Error: Docker is not installed" red bold
        echo "Please install Docker Desktop from https://www.docker.com/products/docker-desktop"
        exit 1
    fi

    # Check if Docker is running
    if ! docker info &> /dev/null; then
        cecho "Error: Docker is not running" red bold
        echo "Please start Docker Desktop and try again"
        exit 1
    fi

    # Create Docker network if it doesn't exist
    if ! docker network ls | grep -q bracket_iq_network; then
        cecho "Creating Docker network..." green
        docker network create bracket_iq_network
    fi

    # Stop any running containers and remove them
    cecho "Stopping any running containers..." green
    docker compose down

    # Build Docker images
    cecho "Building Docker images..." green
    docker compose build

    # Start services
    cecho "Starting services..." green
    docker compose up -d db

    # Wait for database to be ready
    cecho "Waiting for database..." green
    sleep 5

    # Run migrations
    cecho "Running migrations..." green
    docker compose run --rm web python manage.py migrate

    # Collect static files
    cecho "Collecting static files..." green
    docker compose run --rm web python manage.py collectstatic --noinput

    # Create superuser if it doesn't exist
    if [ -z "$(docker compose run --rm web python manage.py shell -c 'from django.contrib.auth import get_user_model; print(get_user_model().objects.filter(is_superuser=True).exists())')" ]; then
        cecho "Creating superuser..." green
        docker compose run --rm web python manage.py createsuperuser
    fi

    # Start all services
    cecho "Starting all services..." green
    docker compose up -d

    cecho "Docker setup complete! ðŸŽ‰" green bold
    echo
    cecho "Your development environment is ready:" blue
    echo "1. Services are running at http://localhost:8000"
    echo "2. Use './scripts/manage <command>' to run Django commands"
    echo "3. Use './scripts/stop' to stop services"
fi 